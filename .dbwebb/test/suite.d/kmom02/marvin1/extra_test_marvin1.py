#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from unittest.mock import patch
from io import StringIO
import os
import sys
from unittest import TextTestRunner
from examiner.exam_test_case import ExamTestCase
from examiner.exam_test_result import ExamTestResult
from examiner.helper_functions import import_module
from examiner.helper_functions import find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)



class Test3ExtraMarvin1(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                import_module(REPO_PATH, 'marvin')
                str_data = fake_out.getvalue()
                self.assertIn(correct, str_data)



    def test_a_check_letters_valid(self):
        """
        Testar menyval a1
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a1"]
        self.norepr = True
        self._multi_arguments = ["a1", "Extemporera", "ropa", "", "q"]

        self.check_print_contain(self._multi_arguments, "Match!")



    def test_b_check_letters_invalid_two(self):
        """
        Testar menyval a1
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a1"]
        self.norepr = True
        self._multi_arguments = ["a1", "Extemporera", "ropade", "", "q"]

        self.check_print_contain(self._multi_arguments, "No match!")



    def test_c_multiplier_correct_high(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a2"]
        self.norepr = True
        self._multi_arguments = ["a2", "2", "100", "", "q"]

        self.check_print_contain(self._multi_arguments, "67 times")



    def test_d_multiplier_correct_low(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a2"]
        self.norepr = True
        self._multi_arguments = ["a2", "1234567890", "2", "", "q"]

        self.check_print_contain(self._multi_arguments, "0 times")



    def test_e_multiplier_correct_fail(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a2"]
        self.norepr = True
        self._multi_arguments = ["a2", "555", "5", "", "q"]

        self.check_print_contain(self._multi_arguments, "-1 times")



    def test_f_tab_to_spaces(self):
        """
        Testar menyval a3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a3"]
        self.norepr = True
        self._multi_arguments = ["a3", "The \tWheel of\tTime\tturns", "", "q"]

        self.check_print_contain(self._multi_arguments,
            "The     Wheel of    Time    turns")



    def test_g_tab_to_spaces_fail(self):
        """
        Testar menyval a3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a3"]
        self.norepr = True
        self._multi_arguments = ["a3", "An escaped \\ttab", "", "q"]

        self.check_print_contain(self._multi_arguments, "An escaped \\ttab")



    def test_h_concatinate_names(self):
        """
        Testar menyval a4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a4"]
        self.norepr = True
        self._multi_arguments = ["a4", "sheldon", "amy", "", "q"]

        self.check_print_contain(self._multi_arguments, "shamy")



    def test_i_concatinate_names_two(self):
        """
        Testar menyval a4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a4"]
        self.norepr = True
        self._multi_arguments = ["a4", "brad", "angelina", "", "q"]

        self.check_print_contain(self._multi_arguments, "brangelina")



    def test_j_point_per_player(self):
        """
        Testar menyval a5
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a5"]
        self.norepr = True
        self._multi_arguments = ["a5", "a2b4A5s3B1", "", "q"]

        self.check_print_contain(self._multi_arguments, "a -3, b 3, s 3")



    def test_k_point_per_player_two(self):
        """
        Testar menyval a5
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["a5"]
        self.norepr = True
        self._multi_arguments = ["a5", "g3l1H5l2G3l1", "", "q"]

        self.check_print_contain(self._multi_arguments, "g 0, l 4, h -5")




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
