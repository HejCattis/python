#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from unittest.mock import patch
from io import StringIO
import os
import sys
from unittest import TextTestRunner
from examiner.exam_test_case import ExamTestCase
from examiner.exam_test_result import ExamTestResult
from examiner.helper_functions import import_module
from examiner.helper_functions import find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
# marvin = import_module(REPO_PATH, 'marvin')



class Test1Marvin1(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                import_module(REPO_PATH, 'marvin')
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)


    def check_print_not_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                import_module(REPO_PATH, 'marvin')
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertNotIn(val, str_data)



    def test_a_greeting_includes_name(self):
        """
        Testar menyval 1
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["1"]
        self.norepr = True
        self._multi_arguments  = ["1", "Benny", "", "q"]
        self.check_print_contain(self._multi_arguments , ["Benny"])



    def test_b_temperature_high(self):
        """
        Testar menyval 2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["2"]
        self.norepr = True
        self._multi_arguments = ["2", "135.205", "", "q"]
        self.check_print_contain(self._multi_arguments, ["275.37"])



    def test_c_temperature_low(self):
        """
        Testar menyval 2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["2"]
        self.norepr = True
        self._multi_arguments = ["2", "-252.454", "", "q"]
        self.check_print_contain(self._multi_arguments, ["-422.42"])



    def test_d_word_multiplier(self):
        """
        Testar menyval 3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        word, times = "cinemateket", 4
        self.tags = ["3"]
        self.norepr = True
        self._multi_arguments = ["3", word, times, "", "q"]

        # If the studend does not include newlines in output.
        try:
            self.check_print_contain(self._multi_arguments, [(word + "\n") * times])
        except AssertionError as _:
            self.check_print_contain(self._multi_arguments, [word * times])



    def test_e_word_multiplier_two(self):
        """
        Testar menyval 3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        word, times = "dbwebb", 3
        self.tags = ["3"]
        self.norepr = True
        self._multi_arguments = ["3", word, times, "", "q"]

        # If the studend does not include newlines in output.
        try:
            self.check_print_contain(self._multi_arguments, [(word + "\n") * times])
        except AssertionError as _:
            self.check_print_contain(self._multi_arguments, [word * times])



    def test_f_sum_and_avrage(self):
        """
        Testar menyval 4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["10", "25.4", "13", "7.16", "2.123"]
        sum_numbers = sum([float(n) for n in numbers])
        med_numbers = sum_numbers/len(numbers)

        self.tags = ["4"]
        self.norepr = True
        self._multi_arguments = ["4", *numbers, "done", "", "q"]

        self.check_print_contain(self._multi_arguments, [
            str(round(sum_numbers, 2)), str(round(med_numbers, 2))
        ])



    def test_g_sum_and_avrage_two(self):
        """
        Testar menyval 4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["-10.37", "0", "88", "-61.468"]
        sum_numbers = sum([float(n) for n in numbers])
        med_numbers = sum_numbers/len(numbers)

        self.tags = ["4"]
        self.norepr = True
        self._multi_arguments = ["4", *numbers, "done", "", "q"]

        self.check_print_contain(self._multi_arguments, [
            str(round(sum_numbers, 2)), str(round(med_numbers, 2))
        ])



    def test_h_compare_small_larger(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande inte finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "2", "11", "-61.468"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]

        self.check_print_not_contain(self._multi_arguments, ["same!"])



    def test_i_compare_small_larger_two(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "2", "11", "-61.468"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]

        self.check_print_contain(self._multi_arguments, ["smaller!", "larger!"])



    def test_j_compare_same_smaller(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "11", "10", "10"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]

        self.check_print_contain(self._multi_arguments, ["same!", "smaller!"])



    def test_k_compare_same_smaller_two(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande inte finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "11", "10", "10"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]
        self.check_print_not_contain(self._multi_arguments, ["larger!"])



    def test_l_compare_same_larger(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande inte finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "12", "12", "12", "14"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]
        self.check_print_not_contain(self._multi_arguments, ["smaller!"])



    def test_m_compare_same_larger_two(self):
        """
        Testar menyval 5
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        numbers = ["11", "12", "12", "12", "14"]

        self.tags = ["5"]
        self.norepr = True
        self._multi_arguments = ["5", *numbers, "done", "", "q"]

        self.check_print_contain(self._multi_arguments, ["same!", "larger!"])



    def test_n_hyphen_string(self):
        """
        Testar menyval 6
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["6"]
        self.norepr = True
        self._multi_arguments = ["6", "python", "", "q"]

        self.check_print_contain(self._multi_arguments, ["p-yy-ttt-hhhh-ooooo-nnnnnn"])



    def test_o_hyphen_string(self):
        """
        Testar menyval 6
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["6"]
        self.norepr = True
        self._multi_arguments = ["6", "1234", "", "q"]

        self.check_print_contain(self._multi_arguments, ["1-22-333-4444"])



    def test_p_is_isogram(self):
        """
        Testar menyval 7
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["7"]
        self.norepr = True
        self._multi_arguments = ["7", "polis", "", "q"]

        self.check_print_contain(self._multi_arguments, ["Match!"])



    def test_q_is_isogram_two(self):
        """
        Testar menyval 7
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.tags = ["7"]
        self.norepr = True
        self._multi_arguments = ["7", "skrällen", "", "q"]

        self.check_print_contain(self._multi_arguments, ["No match!"])




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
