#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')



class Test3Marvin4Menu(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                for val in correct:
                    str_data = fake_out.getvalue()
                    self.assertIn(val, str_data)



    @tags("12", "search_menu")
    def test_search_country(self):
        """
        Testar att anropa menyval '12' i main.py.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["12", "X", "", "q"]

        self.check_print_contain(self._multi_arguments, ["Luxembourg", "Mexico"])



    @tags("12", "search_menu")
    def test_search_country_missing(self):
        """
        Testar att anropa menyval '12' i main.py där landet saknas.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["12", "Hoppalotjingien", "", "q"]

        self.check_print_contain(self._multi_arguments, ["Country does not exist!"])



    @tags("13", "change_menu")
    def test_country_change_years(self):
        """
        Testar att anropa menyval '13' i main.py. Testar med de senare året först.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["13", "Hong Kong,2017,1990", "", "q"]

        self.check_print_contain(self._multi_arguments, ["Hong Kong:-23.56%"])



    @tags("13", "change_menu")
    def test_country_change_years_wrong_year(self):
        """
        Testar att anropa menyval '13' i main.py. Testar med ett felaktigt år.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["13", "Iceland,1990,2999", "", "q"]

        self.check_print_contain(self._multi_arguments, ["Wrong year!"])



    @tags("14", "data_menu")
    def test_all_country(self):
        """
        Testar att anropa menyval '14' i main.py. Där landet har population.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["14", "Kyrgyzstan", "", "q"]


        answer = [
            "Kyrgyzstan",
            "1990: 23696000.0",
            "2005: 5475000.0",
            "2017: 11180000.0",
            "1990-2005: -76.89%",
            "2005-2017: 104.2%",
            "1990: 4372885",
            "2005: 5075340",
            "2017: 6189727",
        ]

        self.check_print_contain(self._multi_arguments, answer)

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
